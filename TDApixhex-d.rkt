#lang racket
(provide (all-defined-out))

;constructor de pixhex-d.
(define (pixhex-d x y hex d)

  ;Funcion que verifica que el numeros hexadecimal que entrega el usuario exista.
  (define (verificarHex hex)
  (if(equal? (substring hex 0 1) "#")
     (if(or(or(equal?(substring hex 1 2)"A")
              (equal?(substring hex 1 2)"B")
              (equal?(substring hex 1 2)"C")
              (equal?(substring hex 1 2)"D")
              (equal?(substring hex 1 2)"E")
              (equal?(substring hex 1 2)"F"))(integer? (string->number(substring hex 1 2))))
        (if(or(or(equal?(substring hex 2 3)"A")
              (equal?(substring hex 2 3)"B")
              (equal?(substring hex 2 3)"C")
              (equal?(substring hex 2 3)"D")
              (equal?(substring hex 2 3)"E")
              (equal?(substring hex 2 3)"F"))(integer? (string->number(substring hex 2 3))))
           (if(or(or(equal?(substring hex 3 4)"A")
              (equal?(substring hex 3 4)"B")
              (equal?(substring hex 3 4)"C")
              (equal?(substring hex 3 4)"D")
              (equal?(substring hex 3 4)"E")
              (equal?(substring hex 3 4)"F"))(integer? (string->number(substring hex 3 4))))
              (if(or(or(equal?(substring hex 4 5)"A")
              (equal?(substring hex 4 5)"B")
              (equal?(substring hex 4 5)"C")
              (equal?(substring hex 4 5)"D")
              (equal?(substring hex 4 5)"E")
              (equal?(substring hex 4 5)"F"))(integer? (string->number(substring hex 4 5))))
                 (if(or(or(equal?(substring hex 5 6)"A")
              (equal?(substring hex 5 6)"B")
              (equal?(substring hex 5 6)"C")
              (equal?(substring hex 5 6)"D")
              (equal?(substring hex 5 6)"E")
              (equal?(substring hex 5 6)"F"))(integer? (string->number(substring hex 5 6))))
                    (if(or(or(equal?(substring hex 6 7)"A")
              (equal?(substring hex 6 7)"B")
              (equal?(substring hex 6 7)"C")
              (equal?(substring hex 6 7)"D")
              (equal?(substring hex 6 7)"E")
              (equal?(substring hex 6 7)"F"))(integer? (string->number(substring hex 6 7))))
                       #t
                       #f)
                    #f)
                 #f)
              #f)
           #f)
        #f)
     #f))
  (if
     (and
      (and(number? x)
          (integer? x)
          (>= x 0))
      (and(number? y)
          (integer? y)
          (>= y 0))
      (and(string? hex)
          (= (string-length hex) 7)
          (equal?(verificarHex hex)#t))
      (and(number? d)
          (>= d 0)))
     (list (list x y) hex d "pixhex-d")
     (raise "No es un pixhex-d")
    )
  )


(define hex (pixhex-d 0 1 "#FF9910" 10))
hex

